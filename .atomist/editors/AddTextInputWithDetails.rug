@tag "elm"
@description "Adds a text input, with optional type and placeholder, to an Elm program"
editor AddTextInputWithDetails

@displayName "Name"
@description "Name of the text input (the field to store in the model)"
@validInput "An elm identifier"
param input_name: ^[A-Z][\w]*$

@description "HTML type attribute for the text input"
@optional
@default ""
@validInput "`text` or `password` or empty string for none"
param html_input_type: ^[a-z]+$

@description "HTML placeholder attribute, text to indicate purpose"
@optional
@default ""
param placeholder_text: ^.*$

# capitalize
let type_name_foo={ input_name.charAt(0).toUpperCase() + input_name.slice(1) }
let function_body={

  var type_attribute_line = "";
  if (html_input_type != "") {
    type_attribute_line = "        , Html.Attributes.attribute \"type\" \"_HTML_INPUT_TYPE_\"\n";
  };
  var placeholder_line = "";
  if (placeholder_text != "") {
    placeholder_line = "        , Html.Attributes.placeholder \"_PLACEHOLDER_TEXT_\"\n";
  };

  return (
   "_INPUT_NAME_Input : Model -> Html Msg\n" +
   "_INPUT_NAME_Input model =\n" +
   "    Html.input\n" +
   "        [ Html.Events.onInput _TYPE_NAME_\n" +
   "        , Html.Attributes.value model._INPUT_NAME_\n" +
   type_attribute_line +
   placeholder_line +
   "        ]\n" +
   "        []\n").replace(
  /_INPUT_NAME_/g, input_name).replace(
  /_HTML_INPUT_TYPE_/g, html_input_type).replace(
  /_PLACEHOLDER_TEXT_/g, placeholder_text).replace(
  /_TYPE_NAME_/g, type_name_foo);
 }

AddToModel initial_value='""', field_type="String", field_name=input_name

AddMessage constructor={ type_name_foo + " String" },
           update_model={ return "{ model | " + input_name + " = string }" },
           deconstructor={ type_name_foo + " string" }

AddImport module="Main", module_to_import="Html.Events"
AddImport module="Main", module_to_import="Html.Attributes"

AddFunction module="Main", code=function_body
