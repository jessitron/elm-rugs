@description "Add a new pattern to a case in the update function"
@tag "elm"
editor AddUpdateClause

	@description "Elm module to modify"
	@displayName "Module Name"
	@optional
	@default "Main"
	param module: ^[A-Z][\w]*$

  @displayName "New Pattern"
  @description "new pattern the case can match"
  @validInput "A union type deconstructor"
  param new_pattern: ^.*$

	@displayName "Body of case clause"
	@description "What to return when this case is met. usually 'model'"
	@validInput "An Elm expression"
	param model_to_return: ^.*$

with file
  with elm.module when name = module
    with function upd when name = "update" and { -1 == upd.body().indexOf(new_pattern + ' ->')} begin
		  do eval { print("model_to_return is " + model_to_return)}
      with case c when { upd.typeSpecification().endsWith("Model")}
        do addClause new_pattern model_to_return
			with case c when { upd.typeSpecification().endsWith(")")}
        do addClause new_pattern { return (model_to_return + " ! []") }
		end
